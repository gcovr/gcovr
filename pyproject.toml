
[build-system]
requires = [
    "hatchling==1.26.1",
    "hatch-vcs==0.4.0",
    "hatch-fancy-pypi-readme==24.1.0"
]
build-backend = "hatchling.build"

[project]
dynamic = [
    "version",
    "readme",
]
name = "gcovr"
license = "BSD-3-Clause"
license-files = [
    "LICENSE.txt"
]
authors = [
  { name="Lukas Atkinson", email="opensource@lukasatkinson.de" },
  { name="Michael Förderer", email="michael.foerderer@gmx.de" }, # cspell:ignore Förderer
]
description = "Generate C/C++ code coverage reports with gcov"
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Natural Language :: English",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: Microsoft :: Windows",
    "Operating System :: POSIX",
    "Operating System :: Unix",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
    "Topic :: Software Development :: Quality Assurance",
    "Topic :: Software Development :: Testing",
    "Topic :: Utilities",
]
keywords = [
    "gcc",
    "gcov",
    "coverage",
    "lcov",
    "Cobertura",
    "Jenkins",
]
dependencies = [
    "jinja2",
    "lxml",
    "colorlog",
    "pygments>=2.13.0",
    "tomli >= 1.1.0 ; python_version < '3.11'",
]

[project.scripts]
gcovr = "gcovr.__main__:main"

[project.urls]
Documentation = "https://gcovr.com"
Github = "https://github.com/gcovr/gcovr"
Issues = "https://github.com/gcovr/gcovr/issues"

[tool.hatch.build.targets.wheel]
packages = [
    "src/gcovr"
]

[tool.hatch.build.targets.sdist]
include = [
  "src/gcovr/",
]

[tool.hatch.metadata.hooks.fancy-pypi-readme]
content-type = "text/x-rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.fragments]]
path = "README.rst"

[[tool.hatch.metadata.hooks.fancy-pypi-readme.substitutions]]
pattern = '\.\. image:: \./'
# The variable reference is replaced with the packaged version by fancy-pypi-readme
replacement = '.. image:: https://raw.githubusercontent.com/gcovr/gcovr/$HFPR_VERSION/'


[tool.hatch.version]
source = "vcs"

[tool.hatch.build.hooks.vcs]
version-file = "src/gcovr/version.py"
template = """\
# coding: utf-8
# file generated by setuptools_scm
# don't change, don't track in version control
__version__ = {version!r}
"""

[tool.pylint]
ignore-paths = [
    "tests/*",
]
fail-under = 9.99
disable = [
    "unknown-option-value",  # This is because we are testing with several versions
    "Format",
    "logging-fstring-interpolation",
    "missing-module-docstring",
    "no-member",
    "too-few-public-methods",
    # Deactivate "too-many-..." for now
    "too-many-locals",
    "too-many-nested-blocks",
    "too-many-branches",
    "too-many-statements",
    "too-many-arguments",
    "too-many-positional-arguments",
    "too-many-instance-attributes",
    "R0801"  # Similar lines
]
extension-pkg-allow-list = [
    "lxml",
    "gcovr"
]

[tool.mypy]
warn_unused_configs = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
no_implicit_reexport = true
strict_equality = true
extra_checks = true
disable_error_code = "attr-defined"
exclude = [
    "build/.*"
]

[tool.ruff]
exclude = [
    "__pycache__",
    "tests/cmake_gtest/build/_deps",
    "src/gcovr/version.py",
]

[tool.ruff.lint]
# 1. Enable flake8-bugbear (`B`) rules, in addition to the defaults.
select = ["E4", "E7", "E9", "F", "B"]

# 2. Avoid enforcing line-length violations (`E501`)
ignore = ["E501"]

# 3. Avoid trying to fix flake8-bugbear (`B`) violations.
unfixable = ["B"]

# 4. Ignore `E402` (import violations) in all `__init__.py` files, and in selected subdirectories.
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["E402"]
"**/{tests,docs,tools}/*" = ["E402"]

[tool.ruff.format]
# 5. Use double quotes in `ruff format`.
quote-style = "double"

[tool.bandit]
assert_used.skips = [
    "*_test.py",
    "*test_*.py"
]

[tool.pytest.ini_options]
addopts = "-v --timeout=120 --doctest-modules --ignore-glob=*/linked/subdir/* --ignore-glob */*bazel*/* --ignore-glob */.nox*/*"

[tool.coverage.run]
branch = true

[tool.coverage.report]
exclude_lines = [
    "[#]\\s*pragma: no cover",

    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b"
]

[tool.coverage.html]
directory = "htmlcov"
