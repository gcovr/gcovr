ARG UBUNTU_TAG

FROM ubuntu:${UBUNTU_TAG:-ToBeDefined}

ARG TARGETARCH
ARG UBUNTU_TAG
ARG USERID
ARG CC
ARG NOX_ENV_DIR=/gcovr/.nox-containerized/$CC.uid_$USERID

LABEL org.opencontainers.image.authors="GCOVR developers"
LABEL org.opencontainers.image.title="Image used to test GCOVR in the CI and during development"

LABEL org.opencontainers.image.source="https://github.com/gcovr/gcovr/blob/main/admin/Dockerfile.qa"
LABEL org.opencontainers.image.version="$CC"

COPY admin/docker_entrypoint.sh /usr/local/bin/docker_entrypoint.sh

RUN <<EOS
set -e
export DEBIAN_FRONTEND=noninteractive

apt-get update
# Install base requirements
apt-get install -y software-properties-common \
                   sudo \
                   make \
                   cmake \
                   ninja-build \
                   libxml2-utils \
                   git \
                   apt-transport-https \
                   curl \
                   gnupg \
                   latexmk \
                   texlive-fonts-recommended \
                   texlive-latex-recommended \
                   texlive-latex-extra

# Install compiler
apt-get install -y $CC \
                   $(echo "$CC" | sed 's/gcc/g++/ ; s/clang/clang++/')


# cspell:disable
# Install python build dependencies
apt-get install -y libssl-dev \
                   zlib1g-dev \
                   libbz2-dev \
                   libreadline-dev \
                   libsqlite3-dev \
                   curl \
                   git \
                   libncursesw5-dev \
                   xz-utils \
                   tk-dev \
                   libxml2-dev \
                   libxmlsec1-dev \
                   libffi-dev \
                   liblzma-dev
# cspell:enable

# Mark the compiler to not be removed
apt-mark manual $CC $CXX

apt-get autoremove -y
apt-get clean -y
rm -rf /var/lib/apt/lists/*

# Install googletest
git clone -q \
    --branch=release-1.12.1 \
    --depth=1 \
    https://github.com/google/googletest.git /tmp/googletest
cd /tmp/googletest
mkdir build
cd build
CXX=$(echo "$CC" | sed 's/gcc/g++/ ; s/clang/clang++/') cmake .. || ( cat CMakeFiles/*.log && exit 1 )
make
make install
rm -rf /tmp/googletest

# Install bazel
if [ "$TARGETARCH" = "arm64" ] ; then
  echo "4e815a3f92a0285e76f306c5179a4c639e019cb9 -" > /tmp/bazel.sha1sum
else
  echo "627291b8ef18762dd98b1535fe5c84b1792ac2d0 -" > /tmp/bazel.sha1sum
fi
curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/v1.21.0/bazelisk-linux-$TARGETARCH \
  | tee /usr/local/bin/bazel \
  | sha1sum -c /tmp/bazel.sha1sum
chmod 0755 /usr/local/bin/bazel

# Create new user "docker" and set password to "docker"
addgroup docker
id -un "$USERID" && userdel $(id -un "$USERID") || true
useradd --create-home $(if [ -n "$USERID" ] ; then echo "-u $USERID" ; fi) -g docker -g sudo -s /bin/bash docker
echo "docker:docker" | chpasswd

# Make entrypoint executable
chmod 0755 /usr/local/bin/docker_entrypoint.sh
EOS

ENV \
  CC=$CC \
  GCOVR_ISOLATED_TEST=zkQEVaBpXF1i \
  NOX_ENV_DIR=$NOX_ENV_DIR \
  XDG_CACHE_HOME=$NOX_ENV_DIR/.cache

USER docker:docker

# Select language-agnostic "C" locale.
# Unicode is necessary for some tools to work.
ENV LC_ALL=C.UTF-8 LANG=C.UTF-8

COPY pyproject.toml /tmp/pyproject.toml

RUN <<EOS
set -e

curl -fsSL https://pyenv.run | bash
/usr/local/bin/docker_entrypoint.sh pyenv install 3.9
/usr/local/bin/docker_entrypoint.sh pyenv global 3.9

/usr/local/bin/docker_entrypoint.sh python3 --version
/usr/local/bin/docker_entrypoint.sh pip --version
/usr/local/bin/docker_entrypoint.sh pip --no-cache-dir install nox pre-commit
EOS

WORKDIR /gcovr

ENTRYPOINT ["/usr/local/bin/docker_entrypoint.sh"]
CMD []
