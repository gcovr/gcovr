ARG DOCKER_OS

FROM $DOCKER_OS

ARG TARGETARCH
ARG DOCKER_OS
ARG USERID
ARG CC
ARG CXX
ARG NOX_ENV_DIR=/gcovr/.nox-containerized.$CC.uid_$USERID

RUN --mount=type=cache,target=/var/cache/apt <<EOS
set -e
export DEBIAN_FRONTEND=noninteractive

apt-get update
# Install base requirements
apt-get install -y software-properties-common \
                   sudo \
                   make \
                   cmake \
                   $CC \
                   $CXX \
                   ninja-build \
                   libxml2-utils \
                   git \
                   apt-transport-https \
                   curl \
                   gnupg \
                   latexmk \
                   texlive-fonts-recommended \
                   texlive-latex-recommended \
                   texlive-latex-extra

if [ "$DOCKER_OS" = "ubuntu:18.04" ]; then
  # cspell:disable
  apt install -y wget \
                 checkinstall \
                 libreadline-gplv2-dev \
                 libncursesw5-dev \
                 libssl-dev \
                 libsqlite3-dev \
                 tk-dev \
                 libgdbm-dev \
                 libc6-dev \
                 libbz2-dev \
                 libffi-dev \
                 zlib1g-dev
  # cspell:enable
  cd /tmp
  PythonVersion=3.9.20
  wget https://www.python.org/ftp/python/$PythonVersion/Python-$PythonVersion.tgz
  tar xzf Python-$PythonVersion.tgz
  cd Python-$PythonVersion
  # cspell:ignore rpath
  ./configure --enable-optimizations --enable-shared --prefix=/usr/local LDFLAGS=-Wl,-rpath=/usr/local/lib
  # cspell:ignore altinstall
  make altinstall
  update-alternatives --install /usr/local/bin/python3 python3 /usr/local/bin/python3.9 10
elif [ "$DOCKER_OS" = "ubuntu:20.04" ]; then
  apt install -y software-properties-common
  add-apt-repository ppa:deadsnakes/ppa
  apt-get update
  apt install -y python3.9-dev python3.9-venv python3.9
  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.9 10
else
  add-apt-repository ppa:deadsnakes/ppa
  apt-get install -y \
    python3.13-venv \
    python3.13-dev
  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.13 10
fi
python3 --version

# Install pip, nox and requests
if [ "$DOCKER_OS" = "ubuntu:18.04" -o "$DOCKER_OS" = "ubuntu:20.04" -o "$DOCKER_OS" = "ubuntu:22.04" ]; then
  # Install dependencies.
  #
  # Installing pip is a bit more complicated though:
  # * `apt install python3-pip` -> pulls in >100MB of unneeded stuff
  # * `get-pip.py` script -> depends on distutils standard library module, removed by Debian
  curl -sSL https://bootstrap.pypa.io/get-pip.py -o get-pip.py
  python3 get-pip.py
  rm get-pip.py
  python3 -m pip install --upgrade pip
  python3 -m pip install --no-cache-dir nox requests
else
  apt-get install -y python3-pip python3-nox python3-requests
fi

# cspell:ignore autoremove
apt-get autoremove -y
EOS

ENV \
  CC=$CC \
  CXX=$CXX \
  GCOVR_ISOLATED_TEST=zkQEVaBpXF1i \
  NOX_ENV_DIR=$NOX_ENV_DIR \
  XDG_CACHE_HOME=$NOX_ENV_DIR/.cache

RUN <<EOS
set -e
git clone -q \
    --branch=release-1.12.1 \
    --depth=1 \
    https://github.com/google/googletest.git /tmp/googletest
cd /tmp/googletest
mkdir build
cd build
cmake ..
make
make install
rm -rf /tmp/googletest
EOS

RUN  <<EOS
# Install bazel
if [ "$TARGETARCH" == "arm64" ] ; then
  echo "4e815a3f92a0285e76f306c5179a4c639e019cb9 -" > /tmp/bazel.sha1sum
else
  echo "627291b8ef18762dd98b1535fe5c84b1792ac2d0 -" > /tmp/bazel.sha1sum
fi
curl -fsSL https://github.com/bazelbuild/bazelisk/releases/download/v1.21.0/bazelisk-linux-$TARGETARCH \
  | tee /usr/local/bin/bazel \
  | sha1sum -c /tmp/bazel.sha1sum
chmod 0755 /usr/local/bin/bazel
EOS

# Create new user "docker" and set password to "docker"
RUN addgroup docker
RUN id -un "$USERID" && userdel $(id -un "$USERID") || true
RUN useradd --create-home $(if [ -n "$USERID" ] ; then echo "-u $USERID" ; fi) -g docker -g sudo -s /bin/bash docker
RUN echo "docker:docker" | chpasswd

USER docker:docker

# Select language-agnostic "C" locale.
# Unicode is necessary for some tools to work.
ENV LC_ALL=C.UTF-8 LANG=C.UTF-8

WORKDIR /gcovr

                                                # This are the arguments given to "docker run ... <Image> $0 $@"
ENTRYPOINT python3 -m nox --envdir $NOX_ENV_DIR $0 "$@"
