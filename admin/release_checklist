#!/usr/bin/env bash
set -eu

# This is an automated release checklist. Call it to ensure that all known
# mentions of the gcovr version have been updated to a target version.

printerr() {
    echo "$@" >&2
}

verify_tags=error
verify_docs_next_version=error
verify_change_fragments=error
target_version=
usage="usage: $0 [OPTIONS] TARGET_REVISION

Options:
  --no-verify-tags
  --no-verify-docs-next-version
  --no-verify-change-fragments
"

while [[ "$#" -gt 0 ]]; do
    case "$1" in
        --no-verify-tags)
            verify_tags=notice
            shift
            ;;
        --no-verify-docs-next-version)
            verify_docs_next_version=notice
            shift
            ;;
        --no-verify-change-fragments)
            verify_change_fragments=notice
            shift
            ;;
        -*)
            printerr "unknown argument $1"
            printerr "$usage"
            exit 1
            ;;
        *)
            target_version="$1"
            shift
            break
            ;;
    esac
done

if [[ -z "$target_version" || "$#" -ne 0 ]]; then
    printerr "$usage"
    exit 1
fi

ok=yes

maybe_error() {
    local influence="$1"
    shift
    if [[ "$influence" = "error" ]]; then
        ok=no
    #else
    #    ok stays unchanged
    fi
    printerr "::$influence" "$@"
}

log_error() {
    maybe_error error "::" "$@"
}

if ! [[ -d .git ]]; then
    log_error ":: Please run this script from the repository root"
    exit 1
fi

grep -qE "^__version__ = ['\"]$target_version['\"]\$" gcovr/version.py \
    || log_error "gcovr/version.py:: Please update with this version"

grep -qE "^$target_version \\(.+\\)\$" doc/source/changelog.rst \
    || log_error "doc/source/changelog.rst:: Please update with this version"

change_fragments="$(ls -1 doc/source/changes/*.rst 2>/dev/null || exit 0)"
test -z "$change_fragments" || {
    while IFS= read -r line; do
        maybe_error $verify_change_fragments \
            "file=$line :: Move fragment to doc/source/changelog.rst"
    done <<< "$change_fragments"
}

grep -qE "version=['\"]gcovr $target_version['\"]" doc/examples/example_xml.xml \
    || log_error ":: Please regenerate the examples: " \
             "cd doc/examples; ./example_xml.sh > example_xml.xml"

grep -qE "^ *.*$(basename $0) .EXTRA_CHECKLIST_ARGS $target_version\$" .github/workflows/deploy.yml \
    || log_error ".github/workflows/deploy.yml:: Please update the $0 version"

occurrences="$(
  grep -E '\.\. (versionadded|versionchanged|deprecated):: NEXT' \
       doc/source/*.rst doc/source/*/*.rst *.rst || exit 0)"
test -z "$occurrences" || {
    maybe_error $verify_docs_next_version \
                ":: Please update notes with next version"
    while IFS= read -r line; do
        maybe_error $verify_change_fragments \
            "file=$line :: Please update with next version"
    done <<< "$occurrences"
}

if git tag | grep -qE "^$target_version\$"; then
    # grandfathering of non-annotated 3.4 tag
    [[ "$target_version" = 3.4 ]] \
        || [[ "$(git cat-file -t "$target_version")" = tag ]] \
        || maybe_error $verify_tags \
                       ":: Please use annotated tags (git tag -a) for releases"
fi

if [[ "$ok" = yes ]]; then
    echo "SUCCESS: release may proceed"
else
    echo "::error ::Please fix the above problems"
    exit 1
fi
