.. _text_output:
.. _txt_output:

Text Output
===========

The text output format summarizes coverage in a plain-text table.
This is the default output format if no other format is selected.
This output format can also be explicitly selected
with the :option:`gcovr --txt` option.

.. versionadded:: 5.0
   Added :option:`--txt<gcovr --txt>`.

Example output:

.. include:: ../../examples/example.txt
    :literal:

Example code
------------

The ``gcovr`` command can be used
to analyze programs compiled with GCC or Clang.
The following sections illustrate the application of ``gcovr``
to test coverage of the following program:

.. include:: ../../examples/example.cpp
    :code: cpp
    :number-lines: 1

This code executes several subroutines in this program,
but some lines in the program are not executed.

Line Coverage
-------------

We compile ``example.cpp`` with the GCC compiler as follows:

.. include:: ../../examples/example.sh
    :code: bash
    :start-after: #BEGIN compile
    :end-before: #END compile

(If you are using CMake,
also see :ref:`oos cmake`.)

Note that we compile this program without optimization, because
optimization may combine lines of code and otherwise change the
flow of execution in the program.  Additionally, we compile with
the ``-fprofile-arcs -ftest-coverage -fPIC`` compiler options, which
add logic to generate output files that can be processed by the
``gcov`` command.

The additional coverage files generated by GCC contain relative paths
from the working directory to the source files. If there are different
working directories for each compile unit this can lead to problems
with finding the source files when generating the report. A solution
can be the option ``-fprofile-abs-path`` which is available since gcc-8.

The compiler generates the ``program`` executable.  When we execute this command:

.. include:: ../../examples/example.sh
    :code: bash
    :start-after: #BEGIN run
    :end-before: #END run

the files ``example.gcno`` and ``example.gcda`` are generated.  These
files are processed by ``gcov`` to generate code coverage statistics.
The ``gcovr`` command calls ``gcov`` and summarizes these
code coverage statistics in various formats.  For example:

.. include:: ../../examples/example.sh
    :code: bash
    :start-after: #BEGIN gcovr
    :end-before: #END gcovr

generates a text summary of the lines executed:

.. include:: ../../examples/example.txt
    :literal:

The same result can be achieved when explicit :option:`--txt<gcovr --txt>`
option is set. For example::

    gcovr -r . --txt

generates the same text summary.

Each line of this output includes a summary for a given source file,
including the number of lines instrumented, the number of lines
executed, the percentage of lines executed, and a summary of the
line numbers that were not executed.  To improve clarity, gcovr
uses an aggressive approach to grouping uncovered lines and will
combine uncovered lines separated by "non-code" lines (blank,
freestanding braces, and single-line comments) into a single region.
As a result, the number of lines listed in the "Missing" list may
be greater than the difference of the "Lines" and "Exec" columns.

The :option:`-r/--root<gcovr --root>` option specifies the root directory
for the files that are being analyzed.  This allows ``gcovr`` to generate
a simpler report (without absolute path names), and it allows system header files
to be excluded from the analysis.

Note that ``gcov`` accumulates statistics by line.  Consequently, it
works best with a programming style that places only one statement
on each line.

..
    In ``example.cpp``, the ``MACRO`` macro executes a
    branch, but ``gcov`` cannot discern which branch is executed.


Branch Coverage
---------------

The ``gcovr`` command can also summarize branch coverage using
the :option:`-b/--branches<gcovr --branches>` option:

.. include:: ../../examples/example_branches.sh
    :code: bash
    :start-after: #BEGIN gcovr
    :end-before: #END gcovr

This generates a tabular output that summarizes the number of branches, the number of
branches taken and the branches that were not completely covered:

.. include:: ../../examples/example_branches.txt
    :literal:

The same result can be achieved when explicit :option:`--txt<gcovr --txt>`
option is set. For example::

    gcovr -r . --branches --txt

prints the same tabular output.
