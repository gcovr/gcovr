# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Run GCOVR CI

on:
  workflow_dispatch: # For manual triggering
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, edited]

jobs:

  # -----------------------------------------------------------------------------------------------
  changelog:
  # -----------------------------------------------------------------------------------------------
    runs-on: ubuntu-22.04
    env:
      PR_BODY: "${{ github.event.pull_request.body }}"
      CHANGELOG_ISSUE: ":issue:`${{ github.event.pull_request.number }}`"
    outputs:
      tag: ${{ steps.changelog.outputs.tag || '' }}
      tag_message: ${{ steps.changelog.outputs.tag_message || '' }}
    steps:
      - uses: actions/checkout@v4
      - name: Check if PR is mentioned in changelog
        if: ${{ always() }}
        run: |
          if [ -z "${{ github.event.pull_request.number }}" ]; then
            echo 'No PR defined'
          else
            if grep -qE '^\[no changelog\]' <<<"$PR_BODY"; then
              echo 'Marker "[no changelog]" found in PR body'
              if [ "$(grep -F "$CHANGELOG_ISSUE" CHANGELOG.rst)" != "" ]; then
                echo "ERROR: $CHANGELOG_ISSUE found in CHANGELOG.rst."
                exit 1
              else
                echo "OK: $CHANGELOG_ISSUE not found in CHANGELOG.rst"
              fi
            else
              echo 'Marker "[no changelog]" not found in PR body'
              if [ "$(grep -F "$CHANGELOG_ISSUE" CHANGELOG.rst)" == "" ]; then
                echo "ERROR: $CHANGELOG_ISSUE not found in CHANGELOG.rst."
                exit 1
              else
                echo "OK: $CHANGELOG_ISSUE found in CHANGELOG.rst"
              fi
            fi
          fi
          exit 0
      - name: Set output variables
        id: changelog
        run: |
          if [ -z "$(sed -n '/Next Release/ p' CHANGELOG.rst)" ] ; then
            tag="$(sed -n 's/^\([1-9][0-9]*\.[0-9][0-9]*\).*/\1/ p' CHANGELOG.rst | head -n 1)"
            echo "tag=$tag" >> $GITHUB_OUTPUT
            echo "tag_message=$tag ($(date -I))" >> $GITHUB_OUTPUT
          fi

  # -----------------------------------------------------------------------------------------------
  spell-check:
  # -----------------------------------------------------------------------------------------------
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Install spellchecker
        run: |
          npm install -g cspell@8.19.4
      - uses: tj-actions/changed-files@ed68ef82c095e0d48ec87eccea555d944a631a4c # v46
        id: changed-files
        with:
          separator: ","
      - name: Run spellchecker
        run: |
          # Run spellchecker with changed files
          mapfile -d ',' -t added_modified_files < <(printf '%s,' '${{ steps.changed-files.outputs.all_changed_and_modified_files }}')
          cspell --config cspell.json --color --show-suggestions "${added_modified_files[@]}"

  # -----------------------------------------------------------------------------------------------
  upload-coverage:
  # -----------------------------------------------------------------------------------------------
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Copy coverage reports
        run: |
          mkdir -p /tmp/coverage-upload
          rm -rf /tmp/coverage-upload/*
          cp --target-directory=/tmp/coverage-upload ./tests/exclude-line-branch/reference/gcc-5/*.*
          cp --target-directory=/tmp/coverage-upload --force ./tests/exclude-line-branch/reference/gcc-14/*.*
      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: "coverage"
          path: /tmp/coverage-upload/*.*

  # -----------------------------------------------------------------------------------------------
  validate-reports:
  # -----------------------------------------------------------------------------------------------
    runs-on: ubuntu-22.04
    env:
      FORCE_COLOR: "1"

    steps:
      - uses: actions/checkout@v4

      - name: Set up runner
        uses: "./.github/actions/setup-runner"
        with:
          os: ubuntu-22.04
          python-version: 3.13

      - name: Install libxml2
        shell: bash
        run: |
          sudo apt update
          sudo apt-get install -y \
            libxml2-utils

      - name: Run validation
        run: |
          nox --non-interactive --session validate_reports

  # -----------------------------------------------------------------------------------------------
  build-package:
  # -----------------------------------------------------------------------------------------------
    needs: [changelog, spell-check, validate-reports]
    runs-on: ubuntu-22.04
    env:
      FORCE_COLOR: "1"
    outputs:
      tag: ${{ needs.changelog.outputs.tag }}
      tag_message: ${{ needs.changelog.outputs.tag_message }}
      gcovr_version_output: ${{ steps.gcov_version.outputs.gcovr_version_output }}
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 75

      - name: Update tags
        uses: "./.github/actions/update-tags"
        with:
          tag: ${{ needs.changelog.outputs.tag }}
          tag_message: ${{ needs.changelog.outputs.tag_message }}

      - name: Set up runner
        uses: "./.github/actions/setup-runner"
        with:
          os: ubuntu-22.04
          python-version: 3.12

      - name: Lint files
        run: |
          nox --non-interactive --session lint

      - name: Build and check the wheel
        run: |
          nox --non-interactive --session build_wheel

      - name: Set output variables
        id: gcov_version
        run: |
          . .nox/check_wheel/bin/activate
          gcovr_version_output="$(gcovr --version | head -n 1)"
          echo "gcovr_version_output=$gcovr_version_output" >> $GITHUB_OUTPUT

      - name: Upload distribution
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/**

  # -----------------------------------------------------------------------------------------------
  documentation:
  # -----------------------------------------------------------------------------------------------
    needs: [build-package]

    runs-on: ubuntu-22.04
    env:
      FORCE_COLOR: "1"
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 75

      - name: Update tags
        uses: "./.github/actions/update-tags"
        with:
          tag: ${{ needs.build-package.outputs.tag }}
          tag_message: ${{ needs.build-package.outputs.tag_message }}

      - name: Set up runner
        uses: "./.github/actions/setup-runner"
        with:
          os: ubuntu-22.04
          python-version: 3.12

      - name: Generate documentation
        run: |
          nox --non-interactive --session doc

      - name: Set release notes as job summary
        run: |
          (
            echo '''
            # ${{ needs.build-package.outputs.gcovr_version_output }}

            '''
            cat doc/build/release_notes.md
          ) >> $GITHUB_STEP_SUMMARY

  # -----------------------------------------------------------------------------------------------
  host:
  # -----------------------------------------------------------------------------------------------
    needs: [build-package]
    uses: ./.github/workflows/gcovr-ci-job.yml
    with:
      os: ${{ matrix.os }}
      gcc: ${{ matrix.gcc }}
      python-version: ${{ matrix.python-version }}
      upload-app: ${{ matrix.upload-app || false }}  # Explicit set to false if not set
      tag: ${{ needs.build-package.outputs.tag }}
      tag_message: ${{ needs.build-package.outputs.tag_message }}
    secrets: inherit

    # Testing strategy
    # ----------------
    #
    # We have different axes of the testing matrix:
    #
    # OS: Linux, Windows
    # Compiler: GCC-5 to GCC-14, Clang-10 to CLANG-16
    # Python: 3.9 -- 3.13, pypy3
    #
    # Instead of testing all combinations, we try to achieve full coverage
    # across each axis. The main test matrix just represents the Python axis on
    # Linux. The OS=Windows and Compiler axis are added manually.
    #
    # Some cases (Clang compiler) are handled via the Docker-tests.
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04]
        gcc: [gcc-11]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13', 'pypy-3.10']

        include:

          # Test additional compilers with Linux.
          # Note that all compiler versions are also handled via Docker.
          - os: ubuntu-22.04
            gcc: gcc-11
            python-version: '3.13'
            upload-app: true

          # Test minimum and maximum Python version on Windows.
          - os: windows-2022
            gcc: gcc
            python-version: '3.9'
          - os: windows-2025
            gcc: gcc
            python-version: '3.13'
            upload-app: true

          # Test minimum and maximum Python version on Mac OS.
          - os: macos-13
            gcc: gcc
            python-version: '3.13'
            upload-app: true
          - os: macos-14
            gcc: gcc
            python-version: '3.9'
          - os: macos-14
            gcc: gcc-13
            python-version: '3.13'
            upload-app: true
          - os: macos-15
            gcc: gcc
            python-version: '3.13'
            upload-app: true


  # -----------------------------------------------------------------------------------------------
  docker:
  # -----------------------------------------------------------------------------------------------
    needs: [build-package]
    uses: ./.github/workflows/gcovr-ci-job.yml
    with:
      container: true
      gcc: ${{ matrix.gcc }}
      python-version: 3.12
      tag: ${{ needs.build-package.outputs.tag }}
      tag_message: ${{ needs.build-package.outputs.tag_message }}
    secrets: inherit

    strategy:
      fail-fast: false
      matrix:
        gcc: [gcc-5, gcc-6, gcc-8, gcc-9, gcc-10, gcc-11, gcc-12, gcc-13, gcc-14, clang-10, clang-13, clang-14, clang-15, clang-16]
